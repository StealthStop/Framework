#ifndef bdt_350to650_fwm10_jmtev_top6_h
#define bdt_350to650_fwm10_jmtev_top6_h


// Class: ReadBDT
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : BDT::BDT
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.06/06       [394758]
Creator        : owen
Date           : Tue Feb  6 12:28:02 2018
Host           : Darwin owens-mbp.dyn.ucr.edu 14.5.0 Darwin Kernel Version 14.5.0: Thu Jun 16 19:58:21 PDT 2016; root:xnu-2782.50.4~1/RELEASE_X86_64 x86_64
Dir            : /Users/owen/work/cms/stealth-rpv/github/Exploration
Training events: 269884
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
H: "False" [Print method-specific help message]
NTrees: "850" [Number of trees in the forest]
MaxDepth: "3" [Max depth of the decision tree allowed]
MinNodeSize: "2.5%" [Minimum percentage of training events required in a leaf node (default: Classification: 5%, Regression: 0.2%)]
nCuts: "20" [Number of grid points in variable range used in finding optimal cut in node splitting]
BoostType: "AdaBoost" [Boosting type for the trees in the forest (note: AdaCost is still experimental)]
UseBaggedBoost: "True" [Use only a random subsample of all events for growing the trees in each boost iteration.]
AdaBoostBeta: "5.000000e-01" [Learning rate  for AdaBoost algorithm]
BaggedSampleFraction: "5.000000e-01" [Relative size of bagged event sample to original size of the data sample (used whenever bagging is used (i.e. UseBaggedBoost, Bagging,)]
SeparationType: "giniindex" [Separation criterion for node splitting]
# Default:
VerbosityLevel: "Default" [Verbosity level]
VarTransform: "None" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
AdaBoostR2Loss: "quadratic" [Type of Loss function in AdaBoostR2]
Shrinkage: "1.000000e+00" [Learning rate for GradBoost algorithm]
UseRandomisedTrees: "False" [Determine at each node splitting the cut variable only as the best out of a random subset of variables (like in RandomForests)]
UseNvars: "4" [Size of the subset of variables used with RandomisedTree option]
UsePoissonNvars: "True" [Interpret "UseNvars" not as fixed number but as mean of a Possion distribution in each split with RandomisedTree option]
UseYesNoLeaf: "True" [Use Sig or Bkg categories, or the purity=S/(S+B) as classification of the leaf node -> Real-AdaBoost]
NegWeightTreatment: "inverseboostnegweights" [How to treat events with negative weights in the BDT training (particular the boosting) : IgnoreInTraining;  Boost With inverse boostweight; Pair events with negative and positive weights in traning sample and *annihilate* them (experimental!)]
Css: "1.000000e+00" [AdaCost: cost of true signal selected signal]
Cts_sb: "1.000000e+00" [AdaCost: cost of true signal selected bkg]
Ctb_ss: "1.000000e+00" [AdaCost: cost of true bkg    selected signal]
Cbb: "1.000000e+00" [AdaCost: cost of true bkg    selected bkg ]
NodePurityLimit: "5.000000e-01" [In boosting/pruning, nodes with purity > NodePurityLimit are signal; background otherwise.]
DoBoostMonitor: "False" [Create control plot with ROC integral vs tree number]
UseFisherCuts: "False" [Use multivariate splits using the Fisher criterion]
MinLinCorrForFisher: "8.000000e-01" [The minimum linear correlation between two variables demanded for use in Fisher criterion in node splitting]
UseExclusiveVars: "False" [Variables already used in fisher criterion are not anymore analysed individually for node splitting]
DoPreselection: "False" [and and apply automatic pre-selection for 100% efficient signal (bkg) cuts prior to training]
SigToBkgFraction: "1.000000e+00" [Sig to Bkg ratio used in Training (similar to NodePurityLimit, which cannot be used in real adaboost]
PruneMethod: "nopruning" [Note: for BDTs use small trees (e.g.MaxDepth=3) and NoPruning:  Pruning: Method used for pruning (removal) of statistically insignificant branches ]
PruneStrength: "0.000000e+00" [Pruning strength]
PruningValFraction: "5.000000e-01" [Fraction of events to use for optimizing automatic pruning.]
nEventsMin: "0" [deprecated: Use MinNodeSize (in % of training events) instead]
UseBaggedGrad: "False" [deprecated: Use *UseBaggedBoost* instead:  Use only a random subsample of all events for growing the trees in each iteration.]
GradBaggingFraction: "5.000000e-01" [deprecated: Use *BaggedSampleFraction* instead: Defines the fraction of events to be used in each iteration, e.g. when UseBaggedGrad=kTRUE. ]
UseNTrainEvents: "0" [deprecated: Use *BaggedSampleFraction* instead: Number of randomly picked training events used in randomised (and bagged) trees]
NNodesMax: "0" [deprecated: Use MaxDepth instead to limit the tree size]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 12
fwm2_top6                     fwm2_top6                     fwm2_top6                     fwm2_top6                                                       'D'    [0.00256633176468,0.997684717178]
fwm3_top6                     fwm3_top6                     fwm3_top6                     fwm3_top6                                                       'D'    [0.000468951911898,0.584785938263]
fwm4_top6                     fwm4_top6                     fwm4_top6                     fwm4_top6                                                       'D'    [0.0118522150442,0.992299377918]
fwm5_top6                     fwm5_top6                     fwm5_top6                     fwm5_top6                                                       'D'    [0.000555580190849,0.580196559429]
fwm6_top6                     fwm6_top6                     fwm6_top6                     fwm6_top6                                                       'D'    [0.0114272609353,0.983884572983]
fwm7_top6                     fwm7_top6                     fwm7_top6                     fwm7_top6                                                       'D'    [0.000430664484156,0.592605531216]
fwm8_top6                     fwm8_top6                     fwm8_top6                     fwm8_top6                                                       'D'    [0.0160854998976,0.9725035429]
fwm9_top6                     fwm9_top6                     fwm9_top6                     fwm9_top6                                                       'D'    [0.00059400574537,0.568215429783]
fwm10_top6                    fwm10_top6                    fwm10_top6                    fwm10_top6                                                      'D'    [0.0154340025038,0.958241760731]
jmt_ev0_top6                  jmt_ev0_top6                  jmt_ev0_top6                  jmt_ev0_top6                                                    'D'    [0.356196016073,0.999294579029]
jmt_ev1_top6                  jmt_ev1_top6                  jmt_ev1_top6                  jmt_ev1_top6                                                    'D'    [0.000537108047865,0.490775614977]
jmt_ev2_top6                  jmt_ev2_top6                  jmt_ev2_top6                  jmt_ev2_top6                                                    'D'    [1.42120443343e-05,0.298679411411]
NSpec 25
ds_index                      ds_index                      ds_index                      ds_index                                                        'F'    [11,20]
mva_train_weight              mva_train_weight              mva_train_weight              mva_train_weight                                                'F'    [0.0647402852774,1.95650172234]
njets_pt45_eta24              njets_pt45_eta24              njets_pt45_eta24              njets_pt45_eta24                                                'F'    [6,15]
njets_pt20_eta50              njets_pt20_eta50              njets_pt20_eta50              njets_pt20_eta50                                                'F'    [6,34]
nbtag_csv85_pt30_eta24        nbtag_csv85_pt30_eta24        nbtag_csv85_pt30_eta24        nbtag_csv85_pt30_eta24                                          'F'    [0,6]
pfht7p_pt30_eta24             pfht7p_pt30_eta24             pfht7p_pt30_eta24             pfht7p_pt30_eta24                                               'F'    [0,866.232788086]
pfht_pt40_eta24               pfht_pt40_eta24               pfht_pt40_eta24               pfht_pt40_eta24                                                 'F'    [500.000396729,5294.60595703]
pfht_pt45_eta24               pfht_pt45_eta24               pfht_pt45_eta24               pfht_pt45_eta24                                                 'F'    [374.762298584,5294.60595703]
nleptons                      nleptons                      nleptons                      nleptons                                                        'F'    [1,4]
leppt1                        leppt1                        leppt1                        leppt1                                                          'F'    [30.0002098083,985.202514648]
m_lep1_b                      m_lep1_b                      m_lep1_b                      m_lep1_b                                                        'F'    [0,832.883666992]
leppt2                        leppt2                        leppt2                        leppt2                                                          'F'    [0,448.608154297]
m_lep2_b                      m_lep2_b                      m_lep2_b                      m_lep2_b                                                        'F'    [0,617.834716797]
ntop1b                        ntop1b                        ntop1b                        ntop1b                                                          'F'    [0,4]
ncon_top1                     ncon_top1                     ncon_top1                     ncon_top1                                                       'F'    [0,4]
sphericity                    sphericity                    sphericity                    sphericity                                                      'F'    [0.00388922123238,0.955887913704]
aplanarity                    aplanarity                    aplanarity                    aplanarity                                                      'F'    [0.000216122687561,0.446165293455]
es_c                          es_c                          es_c                          es_c                                                            'F'    [0.00776231242344,0.996071636677]
es_d                          es_d                          es_d                          es_d                                                            'F'    [3.62511636922e-05,0.987861871719]
bdt_val_350_fwm10_jmtev       bdt_val_350_fwm10_jmtev       bdt_val_350_fwm10_jmtev       bdt_val_350_fwm10_jmtev                                         'F'    [-0.335429519415,0.218697249889]
bdt_val_650_fwm10_jmtev       bdt_val_650_fwm10_jmtev       bdt_val_650_fwm10_jmtev       bdt_val_650_fwm10_jmtev                                         'F'    [-0.289863437414,0.213920965791]
evt_count                     evt_count                     evt_count                     evt_count                                                       'F'    [3,668722]
run                           run                           run                           run                                                             'F'    [1,1]
lumi                          lumi                          lumi                          lumi                                                            'F'    [1,499374]
event                         event                         event                         event                                                           'F'    [23,79999808]


============================================================================ */

#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef BDTNode__def
#define BDTNode__def
   
class BDTNode {
   
public:
   
   // constructor of an essentially "empty" node floating in space
   BDTNode ( BDTNode* left,BDTNode* right,
                          int selector, double cutValue, bool cutType, 
                          int nodeType, double purity, double response ) :
   fLeft         ( left         ),
   fRight        ( right        ),
   fSelector     ( selector     ),
   fCutValue     ( cutValue     ),
   fCutType      ( cutType      ),
   fNodeType     ( nodeType     ),
   fPurity       ( purity       ),
   fResponse     ( response     ){
   }

   virtual ~BDTNode();

   // test event if it decends the tree at this node to the right
   virtual bool GoesRight( const std::vector<double>& inputValues ) const;
   BDTNode* GetRight( void )  {return fRight; };

   // test event if it decends the tree at this node to the left 
   virtual bool GoesLeft ( const std::vector<double>& inputValues ) const;
   BDTNode* GetLeft( void ) { return fLeft; };   

   // return  S/(S+B) (purity) at this node (from  training)

   double GetPurity( void ) const { return fPurity; } 
   // return the node type
   int    GetNodeType( void ) const { return fNodeType; }
   double GetResponse(void) const {return fResponse;}

private:

   BDTNode*   fLeft;     // pointer to the left daughter node
   BDTNode*   fRight;    // pointer to the right daughter node
   int                     fSelector; // index of variable used in node selection (decision tree)   
   double                  fCutValue; // cut value appplied on this node to discriminate bkg against sig
   bool                    fCutType;  // true: if event variable > cutValue ==> signal , false otherwise
   int                     fNodeType; // Type of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal 
   double                  fPurity;   // Purity of node from training
   double                  fResponse; // Regression response value of node
}; 
   
   
#endif
   
#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadBDT_350to650_fwm10_jmtev_top6 : public IClassifierReader {

 public:

   // constructor
    ReadBDT_350to650_fwm10_jmtev_top6( std::vector<std::string>& theInputVars ) ;


   // destructor
   virtual ~ReadBDT_350to650_fwm10_jmtev_top6() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const;

 private:

   // method-specific destructor
   void Clear();

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   const bool fIsNormalised;
   bool IsNormalised() const { return fIsNormalised; }
   double fVmin[12];
   double fVmax[12];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[12];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)
   std::vector<BDTNode*> fForest;       // i.e. root nodes of decision trees
   std::vector<double>                fBoostWeights; // the weights applied in the individual boosts
};


 
// Clean up
inline void ReadBDT_350to650_fwm10_jmtev_top6::Clear() 
{
   for (unsigned int itree=0; itree<fForest.size(); itree++) { 
      delete fForest[itree]; 
   }
}
   inline double ReadBDT_350to650_fwm10_jmtev_top6::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
         if (IsNormalised()) {
            // normalise variables
            std::vector<double> iV;
            iV.reserve(inputValues.size());
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(NormVariable( *varIt, fVmin[ivar], fVmax[ivar] ));
            }
            retval = GetMvaValue__( iV );
         }
         else {
            retval = GetMvaValue__( inputValues );
         }
      }

      return retval;
   }

#endif
