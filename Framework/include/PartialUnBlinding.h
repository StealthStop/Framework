#ifndef PARTIALUNBLINDING_H
#define PARTIALUNBLINDING_H

class PartialUnBlinding
{
private:
    const std::map<std::string, std::vector<std::pair<unsigned int,unsigned int>> > map2017BCDE = {
        {"297050", {{12, 137}, {193, 776}}},
        {"297056", {{12, 203}}},
        {"297057", {{1, 4}, {14, 105}, {112, 377}, {385, 418}, {424, 509}, {516, 906}}},
        {"297099", {{24, 62}}},
        {"297100", {{1, 15}, {21, 369}, {375, 381}}},
        {"297101", {{1, 668}, {673, 697}, {700, 856}, {862, 937}, {943, 1101}}},
        {"297113", {{1, 204}, {211, 252}}},
        {"297114", {{1, 99}, {106, 161}}},
        {"297175", {{1, 85}}},
        {"297176", {{11, 120}, {125, 214}}},
        {"297177", {{1, 162}}},
        {"297178", {{1, 54}, {59, 334}, {342, 749}, {754, 967}, {972, 1037}, {1043, 1264}, {1272, 1282}, {1290, 1385}}},
        {"297215", {{1, 47}}},
        {"297218", {{1, 27}}},
        {"297219", {{1, 80}, {85, 281}, {288, 579}, {585, 916}, {921, 1429}, {1436, 2004}, {2010, 2638}}},
        {"297224", {{10, 19}, {24, 138}}},
        {"297225", {{1, 32}}},
        {"297227", {{9, 192}}},
        {"297292", {{1, 125}, {130, 131}, {136, 667}, {675, 753}}},
        {"297293", {{1, 121}, {127, 150}}},
        {"297296", {{1, 236}, {240, 401}, {406, 418}, {425, 497}}},
        {"297308", {{1, 44}}},
        {"297359", {{39, 70}, {164, 180}}},
        {"297411", {{32, 737}, {740, 800}, {807, 950}}},
        {"297424", {{32, 149}}},
        {"297425", {{1, 107}, {112, 157}}},
        {"297426", {{1, 28}, {34, 84}, {90, 111}}},
        {"297429", {{1, 72}}},
        {"297430", {{1, 199}}},
        {"297431", {{1, 49}, {55, 64}, {71, 188}}},
        {"297432", {{1, 112}}},
        {"297433", {{1, 159}}},
        {"297434", {{1, 161}}},
        {"297435", {{1, 94}}},
        {"297467", {{50, 138}}},
        {"297468", {{1, 74}}},
        {"297469", {{1, 4}, {9, 70}}},
        {"297483", {{37, 68}, {71, 201}, {206, 214}}},
        {"297484", {{1, 47}, {53, 208}, {214, 214}}},
        {"297485", {{1, 16}, {23, 253}, {258, 299}, {302, 314}, {321, 420}}},
        {"297486", {{1, 74}, {79, 598}, {603, 625}}},
        {"297487", {{1, 433}, {439, 491}, {495, 603}, {609, 613}}},
        {"297488", {{1, 73}, {80, 424}}},
        {"297503", {{5, 275}, {282, 559}, {566, 606}, {612, 635}, {642, 772}, {777, 779}}},
        {"297504", {{1, 41}, {125, 136}}},
        {"297505", {{1, 394}}},
        {"297557", {{8, 28}, {67, 113}, {119, 167}, {173, 174}, {180, 394}}},
        {"297558", {{9, 266}}},
        {"297562", {{1, 69}, {120, 369}}},
        {"297563", {{1, 254}, {260, 264}}},
        {"297598", {{17, 17}, {22, 33}}},
        {"297599", {{1, 169}, {211, 225}, {230, 312}, {319, 385}, {395, 407}}},
        {"297603", {{1, 420}}},
        {"297604", {{1, 126}, {131, 272}, {279, 375}, {381, 407}}},
        {"297605", {{1, 6}, {13, 20}, {24, 89}, {95, 223}, {257, 407}}},
        {"297606", {{1, 94}, {99, 231}}},
        {"297620", {{32, 318}}},
        {"297656", {{64, 116}, {123, 135}, {140, 230}, {269, 307}, {313, 330}, {341, 388}, {393, 433}}},
        {"297665", {{1, 153}, {159, 209}, {214, 279}}},
        {"297666", {{1, 11}, {17, 81}, {86, 121}}},
        {"297670", {{21, 34}}},
        {"297674", {{3, 102}, {108, 188}}},
        {"297675", {{1, 123}, {129, 239}, {244, 328}, {334, 467}, {470, 471}}},
        {"297722", {{55, 160}, {165, 353}}},
        {"297723", {{1, 13}, {51, 222}}},
        {"298996", {{33, 216}}},
        {"298997", {{1, 37}, {47, 47}}},
        {"299000", {{4, 77}}},
        {"299042", {{33, 55}}},
        {"299061", {{38, 355}}},
        {"299062", {{1, 163}, {166, 303}}},
        {"299064", {{7, 85}}},
        {"299065", {{13, 248}, {251, 342}}},
        {"299067", {{1, 459}}},
        {"299096", {{2, 97}}},
        {"299149", {{29, 470}}},
        {"299178", {{37, 56}, {58, 111}}},
        {"299180", {{5, 98}}},
        {"299184", {{1, 561}}},
        {"299185", {{1, 120}}},
        {"299327", {{1, 72}}},
        {"299329", {{1, 172}}},
        {"299368", {{37, 175}}},
        {"299369", {{1, 303}}},
        {"299370", {{1, 7}, {47, 442}}},
    };

    const std::map<std::string, std::vector<std::pair<unsigned int,unsigned int>> > map2017F = {
        {"305044", {{3, 203}, {302, 306}, {309, 310}, {313, 313}, {318, 330}}},
        {"305045", {{1, 873}}},
        {"305046", {{1, 667}, {671, 686}}},
        {"305059", {{63, 518}, {520, 575}}},
        {"305062", {{1, 8}}},
        {"305063", {{1, 35}}},
        {"305064", {{1, 2045}}},
        {"305081", {{52, 1107}}},
        {"305112", {{68, 1527}}},
        {"305113", {{9, 72}}},
        {"305114", {{1, 526}}},
        {"305178", {{69, 74}, {76, 124}}},
        {"305179", {{1, 21}}},
        {"305180", {{1, 9}}},
        {"305181", {{1, 8}}},
        {"305182", {{1, 8}}},
        {"305183", {{1, 231}, {262, 266}}},
        {"305184", {{1, 8}}},
        {"305186", {{1, 112}, {120, 422}}},
        {"305188", {{1, 1002}}},
        {"305202", {{74, 132}, {136, 729}}},
        {"305204", {{1, 1229}}},
        {"305207", {{52, 1077}}},
        {"305208", {{1, 372}}},
        {"305234", {{52, 99}}},
        {"305236", {{1, 23}}},
        {"305237", {{1, 16}, {18, 1147}}},
        {"305247", {{57, 433}}},
        {"305248", {{1, 957}}},
        {"305252", {{1, 548}}},
        {"305282", {{75, 207}}},
        {"305310", {{60, 157}, {163, 458}}},
        {"305311", {{1, 153}}},
        {"305312", {{1, 227}}},
        {"305313", {{1, 741}}},
        {"305314", {{1, 404}}},
        {"305336", {{36, 241}}},
        {"305338", {{1, 107}}},
        {"305341", {{1, 503}}},
        {"305349", {{1, 34}}},
        {"305350", {{1, 21}}},
        {"305351", {{1, 868}}},
        {"305358", {{91, 231}, {233, 253}}},
        {"305364", {{50, 147}}},
        {"305365", {{1, 273}}},
    };

    bool checkEvent(const std::map<std::string, std::vector<std::pair<unsigned int,unsigned int>> >& map, const std::string& RunNum, const UInt_t LumiBlockNum)
    {
        bool pass = false;
        if( map.find(RunNum) != map.end() )
        {
            for(const auto& pair : map.at(RunNum))
            {
                if(pair.first <= LumiBlockNum && LumiBlockNum <= pair.second)
                {
                    pass = true;
                }
            }
        }
        return pass;
    }

    void partialUnBlinding(NTupleReader& tr)
    {
        const auto& RunNum       = tr.getVar<UInt_t>("RunNum");
        const auto& LumiBlockNum = tr.getVar<UInt_t>("LumiBlockNum");
        const auto& runYear = tr.getVar<std::string>("runYear");
        const auto& runtype = tr.getVar<std::string>("runtype");
        
        bool passPartialBlindF = true;
        bool passPartialBlindBCDE = true;
        if(runYear == "2017" && runtype == "Data")
        {
            passPartialBlindF = checkEvent(map2017F, std::to_string(RunNum), LumiBlockNum);        
            passPartialBlindBCDE = checkEvent(map2017BCDE, std::to_string(RunNum), LumiBlockNum);
        }
        tr.registerDerivedVar("passPartialBlindF", passPartialBlindF);
        tr.registerDerivedVar("passPartialBlindBCDE", passPartialBlindBCDE);
    }

public:
    PartialUnBlinding() 
    {
        std::cout<<"Calculating the partial blinding"<<std::endl;   
    }
    
    void operator()(NTupleReader& tr)
    {
        partialUnBlinding(tr);
    }
};

#endif
